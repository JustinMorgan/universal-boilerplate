####################################
# Personal info and preferences
####################################

# Fill in your info so your commits will be tagged correctly
; [user]
;     name = <enter name here>
;     email = <enter email here>

# Merging preferences (optional)
[mergetool]
    prompt = false
    keepBackup = false
    keepTemporaries = false

# Git behavior (optional)
[push]
    default = simple

####################################
# Environment and editor settings
####################################

# If you're using Cloud 9 IDE
; [core]
;     editor = nano
;     whitespace = off
;     excludesfile = ~/.gitignore
; [advice]
;     statusuoption = false
; [color]
;     ui = true
; [push]
;     default = current

# If you like Sublime Text for merging (otherwise, set up your favorite: https://git-scm.com/docs/git-mergetool)
; [mergetool "sublime"]
;     cmd = subl -n $MERGED
;     trustExitCode = false
; [merge]
;     tool = sublime

# If you always want Git to use HTTPS instead of SSH
; [url "https://"]
;     insteadOf = git://

####################################
# Shortcuts and convenience macros
####################################
# Most of these can be used with parameters and flags as normal
# My most commonly used shortcuts are: new, go, pl, ps, ss, mnf, com, save, reword, amend, uncommit, undo
[alias]
  ####################### Plain aliases for standard commands ########################
  # Switch to branch
  #$> git go my_feature_branch
  go = checkout

  # Pull latest from origin
  #$> git pl
  pl = pull

  # Push changes to origin
  #$> git ps
  ps = push

  # See current (uncommitted) changes
  #$> git st
  st = status

  # Merge a branch into this one
  #$> git mrg --no-ff other_branch
  mrg = merge

  # Go to or manipulate a branch
  #$> git br -d branch_to_delete
  br = branch

  # Rebase: See https://git-scm.com/docs/git-rebase
  #$> git reb -i master
  reb = rebase


  ########### Convenience shortcuts: Common command/parameter combinations ###########
  ########### for a typical workflow. Designed to encourage consistency    ###########
  ########### and reduce the need to memorize a ton of Git flags.          ###########
  # Create a new branch
  #$> git new my_feature_branch
  new = checkout -b

  # Peek at where you are in the tree. Shows last commit hash, current head/ref location,
  # and last commit message.
  #$> git sh
  sh = show --oneline --decorate=short -s

  # As "sh", but show only current head/ref location
  #$> git sr
  sr = show -s --format="%C(auto)%d"

  # Show simple commit history
  #$> git lg
  lg = log --oneline --decorate=short

  # Re-enter last commit message (DO NOT USE IF YOU ALREADY PUSHED THE COMMIT)
  #$> git reword "What I should have said"
  reword = commit --amend -m

  # Experimental: See https://adamcod.es/2014/12/10/git-pull-correct-workflow.html
  #$> git plr
  plr = pull --rebase --prune

  # Get current branch name (used by other macros)
  #$> git branch-name
  branch-name = rev-parse --abbrev-ref HEAD

  ######## Simple echoing commands: Show the command and all parameters/flags   ########
  ######## in the console (used by other macros to show you what they're doing) ########
  mrgv = !echo git merge $@ && git merge
  commitv = !echo git commit $@ && git commit
  plv = !echo git pull $@ && git pull
  brv = !echo git branch $@ && git branch
  adv = !echo git add $@ && git add
  resetv = !echo git reset $@ && git reset


  ######## Echoing convenience shortcuts: Command/parameter shortcuts combined ########
  ######## with echoing macros so you can see what your shortcuts are doing    ########
  # Pull if the tree can be fast-forwarded, otherwise fail (and require manual merging)
  #$> git plff
  plff = !git plv --ff-only

  # Merge a branch into this one, but always create a merge commit even if fast-forwarding is possible
  #$> git mnf other_branch
  mnf = !git mrgv --no-ff

  # Merge if the tree can be fast-forwarded, otherwise fail (and require manual merging)
  #$> git mff other_branch
  mff = !git mrgv --ff-only


  ###################### Macros: Combinations of other shortcuts #####################
  # See current uncommitted changes, current branch/head position, and the last commit before where you are.
  # A good way to get your bearings.
  #$> git ss
  ss = !git sh && git st

  # Reopen the last commit, but keep the changes. Basically, it will be as though you haven't committed yet.
  #$> git uncommit
  uncommit = !echo BEFORE && git ss && git resetv --soft HEAD^ && echo AFTER && git ss

  # As uncommit, but including a soft reset. The changes will still be there, but none of them will be staged.
  #$> git uncomr
  uncomr = !echo BEFORE && git ss && git resetv --soft HEAD^ && git reset && echo AFTER && git ss

  # Auto-save current changes (see "save"), go to master and pull latest, then return to this branch
  # Useful when you're preparing to merge the latest from master into this branch
  #$> git upd
  upd = !git save && git go master && git plff && git go -

  # Add all untracked files, then add current changes to most recent commit
  #$> git amend
  amend = !git adv --all && git commitv --amend --no-edit && git ss


  ############################### One-liner functions ################################
  # Add all untracked files and commit everything with the given message
  # Displays status, branch, and latest commit before and after committing
  #$> git com "I did a thing"
  com = "!f() { msg=$1; git sh && git st && git comq \"$msg\"; git ss; }; f"

  # Quiet mode: Same as "com", but do not show before/after state
  #$> git comq "I did a thing"
  comq = "!f() { msg=$1; git add --all && git commit -m \"$msg\"; }; f"

  # Verbose mode: Same as "com", but echo add & commit commands to the console
  #$> git comv "I did a thing"
  comv = "!f() { msg=$1; git sh && git st && git adv --all && git commitv -m \"$msg\"; git ss; }; f"

  # Quicksave: Quick-commit your current changes with a default message.
  # NOTE: "git save" can be used in place of "git stash", with the advantage of
  # preserving a trail in the history. Since it's a normal commit, you can find
  # your saves easily and have as many as you want at a time. If you don't want
  # to push the quicksave as-is, you can use the other macros here (see "amend",
  # "reword", and "uncommit") to change it later.
  #$> git save
  save = "!f() { msg=${1-Interstitial}; git comv \"Save point - $msg\"; }; f"

  # Dump all changes and go back to previous commit. If there are no changes,
  # undo the last commit.
  # NOTE: "git undo" automatically creates a quicksave (see the "save" macro),
  # so you can always get your changes back. The save won't show up in the main
  # tree, but you can reach it directly via the hash or by examining the reflog.
  #$> git undo
  undo = "!f() { git save \"Unstage last commit\" && git resetv --hard HEAD~1 && git ss; }; f"

  ######################## Complex functions (experimental) ##########################
  # Go back to master, get latest from origin, merge this branch in, then delete
  # this branch. Stops executing if any command fails.
  #$> git mrgd --no-ff
  mrgd = "!f() {              \
      bn=$(git branch-name);  \
      git go master           \
          && git mrgv - $@    \
          && git brv -d $bn;  \
      git ss;                 \
  }; f"

  # Quicksave if there are changes, update master and rebase this branch onto it,
  # merge this branch into master, and delete this branch.
  #$> git finish
  finish = !git upd && git reb master && git mrgd --no-ff

  # Delete a branch locally and remotely.
  # Throws an exception if branch name is unspecified.
  #$> git killall my_branch
  killall = "!f() { if [ $# -lt 1 ]; then echo 'ERROR: Wrong number of arguments'; exit 1; fi; bn=$1 && git push origin --delete $bn && git br -d $bn; }; f"

  # Push local branch to origin and set upstream to the same branch on origin.
  #$> git psu
  psu = !bn=${1-$(git branch-name)} && git ps --set-upstream origin $bn && git ss

  # Push local branch and set upstream, but put the remote branch in the "my_branches" folder.
  #$> git psuf
  psuf = !bn=${1-$(git branch-name)} && git ps --set-upstream origin $bn:my_branches/$bn && git ss

  # Create a save point with all current changes, but instead of committing it to this branch,
  # spin off a new branch in the "backup" folder. The new branch will have the same name as
  # this one, plus a timestamp so you can backup as often as you want.
  # Unlike simply creating a new branch and then committing your changes (or vice versa), any
  # changes you're working on will end up uncommitted but intact in the starting branch.
  # Useful if you've hit a dead end and want to back out changes without polluting the tree,
  # but you aren't ready to burn bridges yet.
  # NOTE: Since this finishes with a soft reset, everything will be unstaged when you get back
  # to the starting branch. The changes themselves won't be lost.
  # How it works:
  #   [[ -z $(git status -s) ]]; changes=$?          # Set variable $changes to 1 if there are uncommitted changes, else 0
  #   [ $changes -eq 1 ] && git save                 # If there were uncommitted changes, create a save point
  #   git new backup/$(git branch-name)-$(date +%s)  # Spin off a backup branch with a timestamp
  #   [ $changes -eq 1 ] && git uncomr               # If we created a save point earlier, uncommit it
  #$> git backup
  backup = "!f() { [[ -z $(git status -s) ]]; changes=$?; [ $changes -eq 1 ] && git save; git new backup/$(git branch-name)-$(date +%s) && git go -; [ $changes -eq 1 ] && git uncomr; }; f"
