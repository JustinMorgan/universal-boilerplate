####################################
# USING THIS FILE
####################################
# Simply include this file at the top of your personal .gitconfig in your home folder (~/ or $HOME/):
# [include]
#   path = "<path/to/universal-boilerplate>/.gitconfig"

####################################
# Git preferences
####################################

[push]
  default = simple

# If you always want Git to use HTTPS instead of SSH
# [url "https://"]
#   insteadOf = git://

####################################
# Editor preferences
####################################

[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false

[diff]
  renamelimit = 5000

# Set up your preferred merging tool
# [merge]
#   tool = vscode
#
# [mergetool "vscode"]
#   cmd = code --wait $MERGED

####################################
# Shortcuts and convenience macros
####################################
# Most of these accept added parameters and flags just like the base commands.
# My most commonly used shortcuts are: new, co, pl, ps, st, mrg, cm, save, reword, amend, uncommit, undo

[alias]  

  ####################### Simple shorthand commands ########################
  # These just save you some typing.

  st = status
  ci = commit
  co = checkout
  pl = pull
  ps = push
  mrg = merge
  br = branch
  cp = cherry-pick
  reb = rebase


  ############################### Convenience shortcuts #################################
  # These are git commands with common arguments already filled in. Designed to promote
  # consistency and reduce the need to memorize a ton of command flags.

  # Create a new branch
  # $> git new new-feature-branch-name
  new = checkout -b

  # Peek at where you are in the tree. Shows last commit hash, current head/ref location,
  # and last commit message..
  # $> git sh
  sh = show --oneline --decorate=short -s

  # As "sh", but show only current head/ref location
  # $> git sr
  sr = show -s --format="%C(auto)%d"

  # Show a compact commit history.
  # $> git lg
  lg = log --oneline --decorate=short

  # Rewrite your last commit message. The commit will be unchanged except for the different
  # message. A good way to fix typos.
  # THIS MODIFIES THE LAST COMMIT. DO NOT USE IF YOU ALREADY PUSHED THE COMMIT.
  # $> git reword "What I should've said"
  reword = commit --amend -m

  # Pull with rebase and prune
  # See https://adamcod.es/2014/12/10/git-pull-correct-workflow.html
  # $> git plr
  plr = pull --rebase --prune

  # Show current status in short form
  # $> git sts
  sts = status -s

  # Show most recent commit with metadata and commit message
  # $> git last
  last = log -1 HEAD

  # Set the URL for origin
  # $> git seturl https://url/of/your/git/repo
  seturl = remote set-url origin 

  # Show existing remotes
  # $> git showurl
  showurl = remote -v


  ###################### Helper utilities ######################
  # These are primarily meant to be used by other macros.

  # Get the current branch name
  # $> git branch-name
  branch-name = rev-parse --abbrev-ref HEAD

  # Print to the screen. Used for reader-friendly console output.
  print-yellow = !printf '\\033[33m%s\\033[0m'
  print-magenta = !printf '\\033[35m%s\\033[0m'
  before = print-magenta '\nBefore:\n'
  after = print-magenta '\nAfter:\n'


  ######### Echoing (verbose) commands #########
  # These work the same as normal commands, but they echo the full command into
  # the console, including arguments. They're mainly used by other macros to let
  # you see what they're doing. You can pass arguments to them as normal.
  # $> git adv --all

  mrgv =    !set -x && git merge
  commitv = !set -x && git commit
  plv =     !set -x && git pull
  brv =     !set -x && git branch
  adv =     !set -x && git add 
  resetv =  !set -x && git reset


  ###################### Echoing convenience shortcuts ######################
  # Command/parameter shortcuts combined with echoing macros so you can see
  # what your shortcuts are doing

  # Pull if the tree can be fast-forwarded, otherwise fail (and require manual merging)
  # $> git plff
  plff = !git plv --ff-only

  # Merge a branch into this one, but always create a merge commit even if fast-forwarding is possible
  # $> git mnf other-branch-name
  mnf = !git mrgv --no-ff

  # Merge if the tree can be fast-forwarded, otherwise fail (and require manual merging)
  # $> git mff other-branch-name
  mff = !git mrgv --ff-only


  ########################## Macros #########################
  # These combine multiple other shortcuts into a workflow.

  # See current uncommitted changes, current branch/head position, and the most recent commit message.
  # This is a good way to get your bearings.
  # $> git ss
  ss = !git sh && printf '\\n' && git st

  # Reopen the last commit, but keep the changes. You'll be back to the moment before you committed, except that
  # all changes will remain staged.
  # DO NOT USE THIS IF YOU ALREADY PUSHED THE COMMIT.
  # $> git uncommit
  uncommit = !git before \
    && git ss \
    && git print-magenta '\nReopen last commit:' && printf '\\n' \
    && git resetv --soft HEAD^ \
    && git after \
    && git ss

  # Add all untracked files, then add current changes to the last commit. See also `reword`.
  # THIS MODIFIES THE LAST COMMIT. DO NOT USE IF YOU ALREADY PUSHED THE COMMIT.
  # $> git amend
  amend = !git before \
    && git sts \
    && printf '\\n' \
    && git adv --all \
    && git commitv --amend --no-edit \
    && git after \
    && git st

  # Push to origin while automatically setting the current branch's upstream to a
  # remote branch with the same name.
  # $> git psu
  psu = !git ps --set-upstream origin $(git branch-name) && printf '\\n' && git ss

  # Move to the given branch, pull the latest changes, then return to this branch
  # and merge that branch into this one. This is useful when you're on a feature
  # branch and you want to keep it up to date with the main branch.
  # You must specify a branch (`-` is fine).
  # By design, this will fail if you need to manually merge anything.
  # $> git upd master
  # $> git upd -
  upd = !git co $* && git plff && git co - && git mrgv

  ############# Commit workflow ###########

  # Standard commit workflow: Add all changes and commit everything with the given
  # message. Displays status, branch, and latest commit before and after committing.
  # $> git cm "I did a thing"
  cm = !git add --all && git sts && git ci -m \"$1\" && printf '\\n' && git ss

  # Commit-quiet: Same as `cm`, but with no console output.
  # $> git cmq "I did a thing"
  cmq = !git add --all && git ci -qm 

  # Commit-verbose: Same as `cm`, but with verbose output
  # $> git cmv "I did a thing"
  cmv = !git before \
   && git sts && printf '\\n' \
   && git print-magenta 'Add and commit all:' && printf '\\n' \
   && git adv --all \
   && git sts && printf '\\n' \
   && git commitv -m \"$1\" \
   && git after \
   && git ss

  # Quicksave: Quick-commit your current changes with a default message.
  # NOTE: `git save` can be used in place of `git stash`, with the advantage of
  # preserving a trail in the history. Since it's a normal commit, you can find
  # your saves easily and have as many as you want at a time. If you don't want
  # to push the quicksave as-is, you can use the other macros here to change it
  # later (see `amend`, `reword`, and `uncommit`).
  # $> git save
  save = !git cm 'Save point'

  # Quicksave-quiet: Quicksave with minimal output.
  saveq = !git cmq 'Save point' && git sh

  ######################## Complex functions (experimental) ############################
  # NOTE: Everything in this section is experimental, and may be dangerous if used in the
  # wrong way. Make sure you understand them before you use them.

  # Dump all changes and go back to previous commit. If there are no changes,
  # undo the last commit.
  # NOTE: This macro automatically creates a quicksave (see the `save` macro),
  # so you can always get your changes back. The save won't show up in the main
  # tree, but you can reach it directly via the hash or by examining the reflog.
  # This allows you to discard your current changes while leaving a safety hatch 
  # open just in case.
  # $> git undo
  undo = ! "f() { \
    git before; \
    git sh && git sts; \
    if [[ `git status --porcelain` ]]; then \
      git print-magenta '\nCreating a save point:\n'; \
      git saveq; \
    fi; \
    git print-magenta '\nDiscarding most recent changes:\n'; \
    git reset --hard HEAD~1; \
    git after; \
    git ss; \
  }; f #"

  # Create a save point with all current changes, but instead of committing it to this branch,
  # spin off a new branch in the "backup/" folder. The new branch will have the same name as
  # this one, plus a timestamp so you can backup as often as you want. Bear in mind that
  # your local branch list will get messy if you don't come back and delete them.
  # Unlike simply creating a new branch and then committing your changes (or vice versa), any
  # changes you're working on will end up uncommitted but intact in the starting branch.
  # Useful as a quick & dirty snapshotter if you've hit a dead end and want to discard your
  # changes, but you aren't ready to burn bridges yet.
  #
  # How it works:
  #   [[ -z $(git status -s) ]]; changes=$?          # Set variable $changes to 1 if there are uncommitted changes, else 0
  #   [ $changes -eq 1 ] && git save                 # If there were uncommitted changes, create a save point
  #   git new backup/$(git branch-name)-$(date +%s)  # Spin off a backup branch with a timestamp
  #   [ $changes -eq 1 ] && git uncomr               # If we created a save point earlier, uncommit it
  #
  # If you're still unclear what this does, just run it while you have uncommitted changes, then run
  # `git br` and `git st`. You'll see a new branch called backup/your-branch-name-<timestamp> with a
  # snapshot of your current uncommitted changes.
  #
  # NOTE: Since this finishes with a soft reset, everything will be unstaged when you get back
  # to the starting branch. The changes themselves won't be lost.
  # $> git backup
  backup = "!f() { \
    [[ -z $(git status -s) ]]; changes=$?; \
    [ $changes -eq 1 ] && git save; \
    git new backup/$(git branch-name)-$(date +%s) && git co -; \
    [ $changes -eq 1 ] && git uncomr; \
  }; f #"

  # # Go back to master, get latest from origin, merge this branch into master,
  # # then delete this branch. Stops executing if any command fails.
  # # $> git mrgd --no-ff
  # mrgd = "!f() {            \
  #   bn=$(git branch-name);  \
  #   git co master           \
  #       && git mrgv - $*    \
  #       && git brv -d $bn;  \
  #   git ss;                 \
  # }; f #"

  # # Update master, rebase this branch onto it, merge this branch into master, and delete this branch.
  # # $> git finish
  # finish = !git upd && git reb master && git mrgd --no-ff

  # Delete a branch locally and remotely.
  # By design, this throws an exception if you don't provide a branch name.
  # $> git killall some-branch-name
  killall = "!f() { \
    if [ $# -lt 1 ]; then \
      echo 'ERROR: Wrong number of arguments'; \
      exit 1; \
    fi; \
    bn=$1 \
      && git ps origin --delete $bn \
      && git br -d $bn; \
  }; f #"

  # Switch to previous branch, pull latest, and delete the branch we started on.
  # Typically used when you've finished a feature, pushed the feature branch, and merged your pull 
  # request into the remote master branch.
  # $> git done
  done = "!f() { br=$(git branch-name); git co - && git pl && git br -d $br; }; f #"